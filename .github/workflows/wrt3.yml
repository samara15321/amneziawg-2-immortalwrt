name: Create Release_OFF

on:
  push:
    tags:
      - "6test*.*.*"

jobs:

  # 1️⃣ Базовая сборка OpenWrt
  openwrt-build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        build_env:
          - tag: "23.05.6"
            pkgarch: aarch64_generic
            target: rockchip
            subtarget: armv8
            vermagic: "1165e14f95a921713988260b06d8b0ab"

    steps:
      - uses: actions/checkout@v4
        with:
          repository: immortalwrt/immortalwrt
          ref: v${{ matrix.build_env.tag }}
          fetch-depth: 0

      - name: Setup OpenWrt feeds and config
        run: |
          wget https://raw.githubusercontent.com/immortalwrt/immortalwrt/v${{ matrix.build_env.tag }}/feeds.conf.default -O feeds.conf
          ./scripts/feeds update && ./scripts/feeds install -a
          wget https://downloads.immortalwrt.org/releases/${{ matrix.build_env.tag }}/targets/${{ matrix.build_env.target}}/${{ matrix.build_env.subtarget}}/config.buildinfo -O .config
          echo "CONFIG_PACKAGE_kmod-crypto-lib-chacha20=m" >> .config
          echo "CONFIG_PACKAGE_kmod-crypto-lib-chacha20poly1305=m" >> .config
          echo "CONFIG_PACKAGE_kmod-crypto-chacha20poly1305=m" >> .config
          make defconfig

      - name: Build toolchain and kernel
        run: |
          make tools/install -i -j $(nproc)
          make toolchain/install -i -j $(nproc)
          make target/linux/compile -i -j $(nproc) V=s

      - name: ✅ Verify vermagic
        run: |
          VERMAGIC=$(cat ./build_dir/target-*/linux-*/linux-*/.vermagic)
          echo "VERMAGIC: $VERMAGIC"
          echo "EXPECTED: ${{ matrix.build_env.vermagic }}"
          if [ "$VERMAGIC" != "${{ matrix.build_env.vermagic }}" ]; then
            echo "::warning:: Vermagic mismatch: $VERMAGIC, expected ${{ matrix.build_env.vermagic }}"
            echo "VERMAGIC_MISMATCH=true" >> $GITHUB_ENV
          else
            echo "VERMAGIC_MISMATCH=false" >> $GITHUB_ENV
          fi

      - name: 📝 Save .config
        run: |
          cp .config .config.${{ matrix.build_env.pkgarch }}-${{ matrix.build_env.target }}-${{ matrix.build_env.subtarget }}
          ls -lh .config*

      - name: 📦 Upload build cache (минимальный набор)
        uses: actions/upload-artifact@v4
        with:
          name: openwrt-build-${{ matrix.build_env.tag }}-${{ matrix.build_env.pkgarch }}-${{ matrix.build_env.target }}-${{ matrix.build_env.subtarget }}
          path: |
            ./staging_dir
            ./build_dir/target-*/linux-*
            ./tmp/info.mk
            ./.config.${{ matrix.build_env.pkgarch }}-${{ matrix.build_env.target }}-${{ matrix.build_env.subtarget }}
          include-hidden-files: true

  # 2️⃣ Сборка AmneziaWG пакетов
  amneziawg-build:
    runs-on: ubuntu-latest
    needs: openwrt-build
    strategy:
      matrix:
        build_env:
          - tag: "23.05.6"
            pkgarch: aarch64_generic
            target: rockchip
            subtarget: armv8
            vermagic: "1165e14f95a921713988260b06d8b0ab"

    steps:
      - uses: actions/checkout@v4
        with:
          repository: samara1531/amneziawg_2
          fetch-depth: 0

      - name: 📥 Download build cache
        uses: actions/download-artifact@v4
        with:
          name: openwrt-build-${{ matrix.build_env.tag }}-${{ matrix.build_env.pkgarch }}-${{ matrix.build_env.target }}-${{ matrix.build_env.subtarget }}
          path: ./openwrt

      - name: 🔄 Restore .config
        run: |
          if [ -f ./openwrt/.config.${{ matrix.build_env.pkgarch }}-${{ matrix.build_env.target }}-${{ matrix.build_env.subtarget }} ]; then
            cp ./openwrt/.config.${{ matrix.build_env.pkgarch }}-${{ matrix.build_env.target }}-${{ matrix.build_env.subtarget }} .config
            echo "✅ Config restored:"
            ls -lh .config
          else
            echo "❌ .config file not found in artifact!"
            ls -lah ./openwrt
            exit 1
          fi

      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.6'

      - name: Setup OpenWrt config for AmneziaWG
        run: |
          cd openwrt
          cp ../.config .
          echo "CONFIG_PACKAGE_amneziawg-go=y" >> .config
          echo "CONFIG_PACKAGE_amneziawg-tools=y" >> .config
          echo "CONFIG_PACKAGE_luci-proto-amneziawg=y" >> .config
          echo "CONFIG_PACKAGE_kmod-amneziawg=m" >> .config
          make defconfig

      - name: Check Go version
        run: go version

      - name: Build AmneziaWG packages
        run: |
          make package/amneziawg-go/{clean,download,prepare,compile} V=s
          make package/kmod-amneziawg/{clean,download,prepare,compile} V=s
          make package/amneziawg-tools/{clean,download,prepare,compile} V=s
          make package/luci-proto-amneziawg/{clean,download,prepare,compile} V=s

      - name: Prepare artifacts
        run: |
          mkdir -p awgrelease
          postfix="v${{ github.ref_name }}_${{ matrix.build_env.pkgarch }}_${{ matrix.build_env.target }}_${{ matrix.build_env.subtarget }}"
          cp bin/packages/${{ matrix.build_env.pkgarch }}/awgopenwrt/amneziawg-tools_*.ipk awgrelease/amneziawg-tools_${postfix}.ipk
          cp bin/packages/${{ matrix.build_env.pkgarch }}/awgopenwrt/luci-proto-amneziawg_*.ipk awgrelease/luci-proto-amneziawg_${postfix}.ipk
          cp bin/packages/${{ matrix.build_env.pkgarch }}/awgopenwrt/amneziawg-go_*.ipk awgrelease/amneziawg-go_${postfix}.ipk
          cp bin/targets/${{ matrix.build_env.target}}/${{ matrix.build_env.subtarget}}/packages/kmod-amneziawg_*.ipk awgrelease/kmod-amneziawg_${postfix}.ipk

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: awgrelease/*.ipk
